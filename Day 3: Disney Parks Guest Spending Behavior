Question 1 of 3
What is the average spending per guest per visit for each park experience type during July 2024? Ensure that park experience types with no recorded transactions are shown with an average spending of 0.0. This analysis helps establish baseline spending differences essential for later segmentation.

import pandas as pd

# Convert the 'visit_date' column to datetime format
fct_guest_spending['visit_date'] = pd.to_datetime(fct_guest_spending['visit_date'])

# Filter records for visits that happened in July 2024
july_spending = fct_guest_spending[
    (fct_guest_spending['visit_date'].dt.year == 2024) &
    (fct_guest_spending['visit_date'].dt.month == 7)
]

# Get all unique park experience types (including those with no July visits)
all_experiences = pd.DataFrame(
    fct_guest_spending['park_experience_type'].unique(), 
    columns=['park_experience_type']
)

# Group July data by park experience type to calculate total spent and total number of visits
grouped = july_spending.groupby('park_experience_type').agg(
    total_spent=('amount_spent', 'sum'),      # total amount spent per experience type
    total_visits=('guest_id', 'count')        # total visits per experience type
).reset_index()

# Calculate average spending per guest per visit
grouped['avg_spending_per_guest_per_visit'] = grouped['total_spent'] / grouped['total_visits']

# Merge the results with all experience types to include those with 0 visits
final = all_experiences.merge(
    grouped[['park_experience_type', 'avg_spending_per_guest_per_visit']],
    on='park_experience_type',
    how='left'  # left join ensures all experience types are included
)

# Replace any NaN values (from experience types with no visits) with 0.0
final['avg_spending_per_guest_per_visit'] = final['avg_spending_per_guest_per_visit'].fillna(0.0)


# Display the final result
print(final)


Question 2 of 3
For guests who visited our parks more than once in August 2024, what is the difference in spending between their first and their last visit? This investigation, using sequential analysis, will reveal any shifts in guest spending behavior over multiple visits.

import pandas as pd

# Convert 'visit_date' to datetime format
fct_guest_spending['visit_date'] = pd.to_datetime(fct_guest_spending['visit_date'])

# Filter for visits that occurred in August 2024
august_spending = fct_guest_spending[
    (fct_guest_spending['visit_date'].dt.year == 2024) &
    (fct_guest_spending['visit_date'].dt.month == 8)
]

# Keep only guests who visited more than once in August
multi_visit_guests = august_spending.groupby('guest_id').filter(
    lambda x: x['visit_date'].nunique() > 1
)

# Sort guests by ID and visit date to prepare for sequential analysis
multi_visit_guests = multi_visit_guests.sort_values(by=['guest_id', 'visit_date'])

# For each guest, get their first and last visit date in August
first_last_dates = multi_visit_guests.groupby('guest_id')['visit_date'].agg(['first', 'last']).reset_index()

# Merge first/last visit dates back to the guest spending data
merged = multi_visit_guests.merge(first_last_dates, on='guest_id', how='left')

# Get total spending on each guest's first visit
first_visit_spending = merged[merged['visit_date'] == merged['first']].groupby('guest_id')['amount_spent'].sum().reset_index(name='first_visit_spending')

# Get total spending on each guest's last visit
last_visit_spending = merged[merged['visit_date'] == merged['last']].groupby('guest_id')['amount_spent'].sum().reset_index(name='last_visit_spending')

# Merge first and last visit spendings
spending_comparison = first_visit_spending.merge(last_visit_spending, on='guest_id')

# Calculate the difference in spending between last and first visit
spending_comparison['spending_diff'] = spending_comparison['last_visit_spending'] - spending_comparison['first_visit_spending']

# Display the result
print(spending_comparison)


Question 3 of 3
In September 2024, how can guests be categorized into distinct spending segments such as Low, Medium, and High based on their total spending? Use the following thresholds for categorization:

- Low: Includes values from $0 up to, but not including, $50.
- Medium: Includes values from $50 up to, but not including, $100.
- High: Includes values from $100 and above.

Exclude guests who did not make any purchases in the period.


import pandas as pd

# Convert 'visit_date' to datetime format
fct_guest_spending['visit_date'] = pd.to_datetime(fct_guest_spending['visit_date'])

# Filter records for September 2024
september_spending = fct_guest_spending[
    (fct_guest_spending['visit_date'].dt.year == 2024) &
    (fct_guest_spending['visit_date'].dt.month == 9)
]

# Group by guest to calculate their total spending in September
guest_totals = september_spending.groupby('guest_id')['amount_spent'].sum().reset_index(name='total_spent')

# Keep only guests who actually spent something
guest_totals = guest_totals[guest_totals['total_spent'] > 0]

# Define a function to categorize spending levels
def categorize_spending(amount):
    if amount < 50:
        return 'Low'
    elif amount < 100:
        return 'Medium'
    else:
        return 'High'

# Apply the categorization to each guest based on total spending
guest_totals['spending_segment'] = guest_totals['total_spent'].apply(categorize_spending)

# Show the result
print(guest_totals)

Notes for question 3:
✅ What This Code Does:
1. Focuses on September 2024 only
2. Calculates total spending per guest
3. Categorizes them into:
'Low' (< $50)
'Medium' ($50–$99.99)
'High' ($100 and above)
4. Filters out guests who didn’t spend anything

